{"entries":[{"timestamp":1730811918419,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n"],[-1,"function neop_schreibe_zch(zch_str: string = \"A\", color: number) {\n    let zeichen_matrix2: Array<number> = []\n\n    let mx2 = arr_tech_matrix[0];\n    let my2 = zch_str.length;\n    // arr_tech_matrix[1] = my2 * 7;\n\n    // strip.showRainbow(1, 360)\n\n    let myColor: number = color;\n    let is_type2 = 0; //buchstabe\n\n    let zch_len2 = zch_str.length\n    if (zch_len2 > 1) {\n        is_type2 = 1; // wort\n        let arr_split2 = zch_str.split(\",\")\n        if (arr_split2.length > 2) {\n            is_type2 = 2; //array \n            zeichen_matrix2 = arr_split2.map(wert => parseInt(wert));\n            zch_len2 = 1;\n        }\n    }\n\n    strip.clear()\n    strip.show()\n    let mycolor = randColor();\n\n    for (let o = 0; o < zch_len2; o++) {\n        // myColor = randColor();\n        let zch2: string;\n        if (is_type2 < 2) { //no array\n            zch2 = zch_str[o]\n            if (zch2 == \" \") {\n                myColor = randColor();\n            }\n            let found2 = bst_reihe.indexOf(zch2);\n            if (found2 == -1) {\n                found2 = 0;\n            }\n            zeichen_matrix2 = arr_zeichen[found2];\n        }\n        // strip.clear()\n        // strip.show()\n\n\n        // basic.showString(zch2)\n        zeichen_matrix2.forEach(function (zahl, zeile) {\n            for (let bit2 = 0; bit2 < mx2; bit2++) {\n                // let z = zeile, c = bit2 //7- minus\n                let c = zeile, z = bit2 //7- minus 2024\n                //b=z, z=bit\n                //b=z, z=mx-1-bit\n                if (zahl & Math.pow(2, (bit2 + shift + mx2) % mx2)) {\n                    // let px2 = z * mx2 + ((z % 2) ? (mx2 - 1 - c) : c)\n                    // let px2 = z * mx2 + ((z % 2) == 0 ? (mx2 - 1 - c) : c)\n                    let px2 = z * mx2 + c\n\n                    strip.setPixelColor(px2, myColor);\n                    // strip.showRainbow(1, 360)\n                    //    basic.showNumber(c)\n                }\n            }\n        })\n        // strip.show()\n        // arr_neop_strips[sss].show();\n\n        strip.show();\n\n        if (is_type2 == 1) {\n            pause(strip_pause)\n            // basic.showString(zch2)\n        }\n        strip.rotate(8 * 7);\n        // strip.rotate(0);\n        // strip.show();\n    }\n    automat = true;\n\n}\n\nfunction randColor() {\n    return [NeoPixelColors.Red, NeoPixelColors.Green, NeoPixelColors.Blue, NeoPixelColors.Yellow][Math.randomRange(0, 3)]\n}\n\n\nfunction init_alphabet() {\n    bst_reihe = \" ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜäöü0123456789!?.,*+-=≠:%abcdefghijklmnopqrstuvwxyz()<>\";\n    arr_zeichen = [\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [14, 17, 17, 31, 17, 17, 17, 0], //A\n        [30, 17, 17, 30, 17, 17, 30, 0],\n        [14, 17, 16, 16, 16, 17, 14, 0],\n        [30, 17, 17, 17, 17, 17, 30, 0],//D\n        [31, 16, 16, 30, 16, 16, 31, 0],\n        [31, 16, 16, 30, 16, 16, 16, 0],\n        [14, 17, 16, 23, 17, 17, 14, 0],\n        [17, 17, 17, 31, 17, 17, 17, 0],\n        [14, 4, 4, 4, 4, 4, 14, 0],\n        [31, 1, 1, 1, 1, 17, 14, 0], //J\n        [17, 18, 20, 24, 20, 18, 17, 0], //K\n        [16, 16, 16, 16, 16, 16, 31, 0],\n        [17, 27, 21, 21, 17, 17, 17, 0],\n        [17, 17, 25, 21, 19, 17, 17, 0],\n        [14, 17, 17, 17, 17, 17, 14, 0],\n        [30, 17, 17, 30, 16, 16, 16, 0],\n        [14, 17, 17, 17, 21, 18, 13, 0],\n        [30, 17, 17, 30, 20, 18, 17, 0],\n        [14, 17, 16, 14, 1, 17, 14, 0],\n        [31, 4, 4, 4, 4, 4, 4, 0],       //T\n        [17, 17, 17, 17, 17, 17, 14, 0],\n        [17, 17, 17, 17, 17, 10, 4, 0],\n        [17, 17, 17, 21, 21, 27, 17, 0],\n        [17, 17, 10, 4, 10, 17, 17, 0],\n        [17, 17, 10, 4, 4, 4, 4, 0],\n        [31, 1, 2, 4, 8, 16, 31, 0], //Z\n        [10, 0, 14, 17, 31, 17, 17, 0], //Ä\n        [10, 0, 14, 17, 17, 17, 14, 0], //Ö\n        [10, 0, 17, 17, 17, 17, 14, 0], //Ü\n        [10, 0, 14, 1, 15, 17, 15, 0], //ä\n        [0, 10, 0, 14, 17, 17, 14, 0], //ö\n        [0, 10, 0, 17, 17, 17, 14, 0], //ü\n\n        [14, 17, 19, 21, 25, 17, 14, 0], //0\n        [4, 12, 4, 4, 4, 4, 14, 0],\n        [14, 17, 1, 2, 4, 8, 31, 0],\n        [31, 2, 4, 2, 1, 17, 14, 0],\n        [2, 6, 10, 18, 31, 2, 2, 0],\n        [31, 16, 30, 1, 1, 17, 14, 0],\n        [6, 8, 16, 30, 17, 17, 14, 0],\n        [31, 1, 2, 4, 4, 4, 4, 0],\n        [14, 17, 17, 14, 17, 17, 14, 0],\n        [14, 17, 17, 15, 1, 2, 12, 0],//9\n\n        [4, 4, 4, 4, 4, 0, 4, 0], //!\n        [14, 17, 1, 2, 4, 0, 4, 0], //?\n        [0, 0, 0, 0, 0, 12, 12, 0], //.\n        [0, 0, 0, 0, 0, 12, 12, 4], //,\n        [0, 0, 4, 21, 14, 21, 4, 0], //*\n        [0, 0, 4, 4, 31, 4, 4, 0], //+\n        [0, 0, 0, 0, 31, 0, 0, 0], //-\n        [0, 0, 0, 31, 0, 31, 0, 0], //=\n        [1, 2, 31, 4, 31, 8, 16, 0], //\n        [0, 0, 12, 12, 0, 12, 12, 0], //:\n        [24, 25, 2, 4, 8, 19, 3, 0], //%\n\n        [0, 0, 14, 1, 15, 17, 31, 0],//a\n        [16, 16, 22, 25, 17, 17, 14, 0], //b\n        [0, 0, 15, 16, 16, 16, 15, 0], //c\n        [1, 1, 13, 19, 17, 17, 15, 0], //d\n        [0, 0, 14, 17, 31, 16, 14, 0], //e\n        [2, 5, 4, 14, 4, 4, 4, 4], //f\n        [0, 0, 15, 17, 17, 15, 1, 14], //g\n        [16, 16, 22, 25, 17, 17, 17, 0], //h\n        [4, 0, 12, 4, 4, 4, 14, 0], //i\n        [2, 0, 2, 2, 2, 2, 10, 4], //j\n        [8, 8, 9, 10, 12, 10, 9, 0], //k\n        [12, 4, 4, 4, 4, 4, 14, 0], //l\n        [0, 0, 26, 21, 21, 21, 21, 0],//m\n        [0, 0, 22, 25, 17, 17, 17, 0], //n\n        [0, 0, 14, 17, 17, 17, 14, 0], //o\n        [0, 0, 30, 17, 17, 30, 16, 16], //p\n        [0, 0, 15, 17, 17, 15, 1, 1], //q\n        [0, 0, 11, 12, 8, 8, 8, 0], //r\n        [0, 0, 15, 16, 14, 1, 30, 0], //s\n        [4, 14, 4, 4, 4, 5, 2, 0], //t\n        [0, 0, 17, 17, 17, 19, 13, 0], //u\n        [0, 0, 17, 17, 17, 10, 4, 0], //v\n        [0, 0, 17, 17, 17, 21, 10, 0], //w\n        [0, 0, 17, 10, 4, 10, 17, 0], //x\n        [0, 0, 17, 9, 6, 4, 8, 16], //y\n        [0, 0, 31, 2, 4, 8, 31, 0], //z\n\n\n        [4, 8, 16, 16, 16, 8, 4, 0], //()\n        [4, 2, 1, 1, 1, 2, 4, 0], //)\n\n        [2, 4, 8, 16, 8, 4, 2, 0], //<\n        [8, 4, 2, 1, 2, 4, 8, 0], //>\n        [6, 9, 28, 8, 28, 9, 6, 0]\n    ]\n}\n\nfunction set_helligkeit(helligkeit: number) {\n    strip_helligkeit = helligkeit\n    // console.log(\"helligkeit\"+strip_helligkeit)\n    strip.setBrightness(strip_helligkeit)\n}\nfunction loesche_matrix() {\n    strip.clear()\n    strip.show()\n}\n// strip.show()\nfunction init_strip() {\n    pixelAnzahl = arr_tech_matrix[0] * arr_tech_matrix[1]\n    strip = neopixel.create(0, pixelAnzahl, NeoPixelMode.RGB)\n    strip.setBrightness(strip_helligkeit)\n    strip.clear()\n}\nlet pixelAnzahl = 0\nlet strip_helligkeit = 0\nlet arr_tech_matrix: number[] = []\nlet strip: neopixel.Strip = null\nlet strip2: neopixel.Strip = null\n\n// #########################################\n// let myText: string = \"Ich bin eine Würfelbox\";\nlet myText: string = \"Ich bin eine W\";\nstrip = neopixel.create(DigitalPin.P0, 56 * myText.length, NeoPixelMode.RGB)\nstrip2 = neopixel.create(DigitalPin.P1, 64, NeoPixelMode.RGB)\n// #########################################\n\n// auch  scrollspeed\nlet automat = false\nautomat = true;\n\nlet shift: number = 0\n\nbasic.showIcon(IconNames.SmallSquare)\narr_tech_matrix = [8, 8]\nstrip_helligkeit = 100\nlet strip_pause = 250\n// strip.showColor(neopixel.colors(NeoPixelColors.Green))\n// strip.show()\n// strip.rotate(8)\n// strip.show()\nlet bst_reihe: string = \"\";\nlet arr_zeichen: number[][];\nstrip.setBrightness(strip_helligkeit);\ninit_alphabet();\n\n// strip.setPixelColor(0, neopixel.colors(NeoPixelColors.Red))\n// strip.setPixelColor(1, neopixel.colors(NeoPixelColors.Red))\n// strip.setPixelColor(8, neopixel.colors(NeoPixelColors.Red))\n// strip.setPixelColor(9, neopixel.colors(NeoPixelColors.Red))\n\n// strip.setPixelColor(16, neopixel.colors(NeoPixelColors.Red))\n// strip.setPixelColor(17, neopixel.colors(NeoPixelColors.Red))\n\n\nneop_schreibe_zch(myText, NeoPixelColors.Red)\n\n\n// strip.showRainbow(1, 360)\n\nbasic.forever(() => {\n    if (automat) {\n        strip.rotate(8);\n        strip.show();\n\n        // arr_neop_strips[1].rotate(16 * 1);\n        // arr_neop_strips[1].show();\n\n\n        basic.pause(strip_pause)\n        // arr_neop_strips[0].showRainbow(1, 360)\n\n        // if (runden == max_runden) {\n        //     arr_neop_strips[0].clear();\n        //     basic.showString(\" \");\n        //     // power.lowPowerRequest()\n        // }\n    }\n})\n\ninput.onGesture(Gesture.Shake, function () {\n    basic.showNumber(randint(1, 6))\n})\n\n\n"]],"start1":0,"start2":0,"length1":8390,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n   "]],"start1":144,"start2":144,"length1":68,"length2":8},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":241,"start2":241,"length1":32,"length2":31}]}]},{"timestamp":1730812478385,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"zuW0x:+5ldx@77vH/2TI\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"#]maw5}mNES6.m%qRZ??\""],[0," x=\""]],"start1":151,"start2":151,"length1":34,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":296,"start2":296,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"}]}],"snapshots":[{"timestamp":1730811918418,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Binaer-Box_IP2024\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1730812547094}